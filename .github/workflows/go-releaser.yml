name: goreleaser

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    outputs:
      artifacts: ${{ steps.goreleaser.outputs.artifacts }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Fetch all tags
      run: git fetch --force --tags
    
    - name: Set up Go
      uses: actions/setup-go@v3
      with:
          go-version: 1.19
    
    - uses: crazy-max/ghaction-import-gpg@v5
      id: import_gpg
      with:
        gpg_private_key: ${{ secrets.OCTOPUS_GPG_PRIVATE_KEY }}
        passphrase: ${{ secrets.OCTOPUS_GPG_PASSPHRASE }}
    
    - name: Run GoReleaser
      id: goreleaser-release
      uses: goreleaser/goreleaser-action@v3
      with:
        version: latest
        args: release --rm-dist
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
        GPG_PASSWORD: ${{ secrets.OCTOPUS_GPG_PASSPHRASE }}

    - uses: actions/upload-artifact@v3
      with:
        name: artifacts
        path: |
          dist/*.tar.gz
          dist/*.zip

  msi:
    needs: goreleaser
    runs-on: windows-latest
    outputs:
      msi_file: ${{ steps.buildmsi.outputs.msi }}

    steps:
    - uses: actions/checkout@v3

    - uses: actions/download-artifact@v3
      with:
        name: artifacts
        path: artifacts

    - name: Download octopus.exe
      id: download_exe
      shell: bash
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      run: |
        gh release download "${GITHUB_REF#refs/tags/}" --pattern '*Windows_x86_64.zip'
        printf "::set-output name=zip::%s\n" *.zip
        unzip -o *.zip && rm -v *.zip

    - name: Setup MSBuild
      id: setupmsbuild
      uses: microsoft/setup-msbuild@v1.0.3

    - name: Build MSI
      id: buildmsi
      shell: bash
      env:
        ZIP_FILE: ${{ steps.download_exe.outputs.zip }}
        MSBUILD_PATH: ${{ steps.setupmsbuild.outputs.msbuildPath }}
      run: |
        name="$(basename "$ZIP_FILE" ".zip")"
        version="$(echo -e ${GITHUB_REF#refs/tags/v} | sed s/-.*$//)"
        "${MSBUILD_PATH}\MSBuild.exe" ./build/windows/octopus.wixproj -p:SourceDir="$PWD" -p:OutputPath="$PWD" -p:OutputName="$name" -p:ProductVersion="$version"

    - name: Install AzureSignTool
      run: dotnet tool install --global AzureSignTool

    - name: Sign MSI
      env:
        MSI_FILE: ${{ steps.buildmsi.outputs.msi }}
      shell: powershell
      run: |
        $timestampurl = (
            "http://timestamp.comodoca.com/rfc3161",
            "http://timestamp.globalsign.com/tsa/r6advanced1", #https://support.globalsign.com/code-signing/code-signing-windows-7-8-and-10,
            "http://timestamp.digicert.com", #https://knowledge.digicert.com/solution/SO912.html
            "http://timestamp.apple.com/ts01", #https://gist.github.com/Manouchehri/fd754e402d98430243455713efada710
            "http://tsa.starfieldtech.com",
            "http://www.startssl.com/timestamp",
            "http://timestamp.verisign.com/scripts/timstamp.dll",
            "http://timestamp.globalsign.com/scripts/timestamp.dll",
            "https://rfc3161timestamp.globalsign.com/advanced"
        )

        $ex = null
        $signSuccessful = $false

        foreach ($url in $timestampurl) {
          Write-Host "Signing and timestamping with server $url"
          try {
            & AzureSignTool sign `
              -kvu "${{ secrets.AZURE_KEYVAULT_URL }}" `
              -kvt ${{ secrets.AZURE_KEYVAULT_TENANT_ID }} `
              -kvi "${{ secrets.AZURE_KEYVAULT_CLIENT_ID }}" `
              -kvs "${{ secrets.AZURE_KEYVAULT_CLIENT_SECRET }}" `
              -kvc ${{ secrets.AZURE_KEYVAULT_CERTIFICATE_NAME }} `
              -d "Octopus CLI" `
              -du "https://octopus.com" `
              -tr $url `
              -v `
              $env:MSI_FILE

            $signSuccessful = $true
          }
          catch {
            $ex = $_
          }

          if ($signSuccessful) { break }
        }

        if (-not $signSuccessful) {
          Write-Error $ex
          exit 1
        }

    - name: Upload MSI
      shell: bash
      env:
        MSI_FILE: ${{ steps.buildmsi.outputs.msi }}
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      run: |
        tag_name="${GITHUB_REF#refs/tags/}"
        gh release upload "$tag_name" "$MSI_FILE"

    - uses: actions/upload-artifact@v3
      with:
        name: artifacts
        path: ${{ steps.buildmsi.outputs.msi }}

  generate-packages:
    needs: [goreleaser, msi]
    runs-on: ubuntu-latest
    outputs:
      package_version: ${{ steps.get-version.outputs.version }}

    steps:
    - uses: actions/checkout@v3

    - uses: actions/download-artifact@v3
      with:
        name: artifacts
        path: artifacts/

    - name: Download nuget.exe
      run: curl -o ./nuget.exe https://dist.nuget.org/win-x86-commandline/latest/nuget.exe

    - name: Set package version
      id: get-version
      run: echo "::set-output name=version::$(echo -e ${GITHUB_REF#refs/tags/v})"

    - name: Create Chocolatey package
      run: mono nuget.exe build/cli.nuspec -p:version=${{ steps.get-version.outputs.version }} -OutputDirectory artifacts/

    - name: Create Linux and OSX packages
      run: |
        zip -rj artifacts/OctopusCLI.${{ steps.get-version.outputs.version }}.zip /
          artifacts/*.nupkg \
          artifacts/*.linux*.tar.gz \
          artifacts/*.macOS*.tar.gz \
          artifacts/*.windows*.zip

    - uses: actions/upload-artifact@v3
      with:
        name: artifacts
        path: artifacts/

  publish:
    needs: generate-packages
    runs-on: ubuntu-latest
    env:
      OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_API_KEY }}
      OCTOPUS_HOST: ${{ secrets.OCTOPUS_URL }}      
      OCTOPUS_CLI_SERVER: ${{ secrets.OCTOPUS_URL }}
      OCTOPUS_CLI_API_KEY: ${{ secrets.OCTOPUS_API_KEY }}

    steps:
    - uses: actions/download-artifact@v3
      with:
        name: artifacts
        path: artifacts

    - name: Install Octopus CLI 🐙
      uses: OctopusDeploy/install-octopus-cli-action@v1
      with:
        version: latest

    - name: Push a package to Octopus Deploy 🐙
      uses: OctopusDeploy/push-package-action@v2
      with:
        space: Integrations
        packages: artifacts/OctopusCli.${{ needs.generate-packages.outputs.package_version }}.zip

    - name: Fetch Release Notes
      id: fetch-release-notes
      run: |
        echo "::debug::${{github.event_name}}"
        OUTPUT_FILE="release_notes.txt"
        gh view release "${GITHUB_REF#refs/tags/}" --jq '.body' --json 'body' | sed 's#\r#  #g' > $OUTPUT_FILE
        echo "::set-output name=release-note-file::$OUTPUT_FILE"

    - name: Create a release in Octopus Deploy 🐙
      uses: OctopusDeploy/create-release-action@v2
      with:
        space: Integrations
        project: 'cli'
        package_version: ${{ needs.generate-packages.outputs.package_version }}
        packages: '*:NuGet.CommandLine:4.4.1'
        release_notes_file: ${{ steps.fetch-release-notes.outputs.release-note-file || ''}}
        git_ref: ${{ (github.ref_type == 'tag' && github.event.repository.default_branch ) || (github.head_ref || github.ref) }}
        git_commit: ${{ github.event.after || github.event.pull_request.head.sha }}
