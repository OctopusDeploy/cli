
step "push-cli-to-chocolatey" {
    name = "Push cli to Chocolatey"

    action {
        action_type = "Octopus.Script"
        environments = ["production"]
        properties = {
            Octopus.Action.Script.ScriptBody = <<-EOT
                $nugetPackagePath = $OctopusParameters["Octopus.Action.Package[NuGet.CommandLine].ExtractedPath"]
                $nugetExe = Join-Path -Path $nugetPackagePath -ChildPath "Tools\nuget.exe"
                $packagePath = $OctopusParameters["Octopus.Action.Package[cli].PackageFilePath"]

                $maxAttempts = 5
                $currentAttempt = 1

                while ($currentAttempt -le $maxAttempts)
                {
                    write-host "Pushing package ($packagePath) to Chocolatey (attempt $currentAttempt)"
                    . $nugetExe push "$($packagePath)" -source $OctopusParameters["Publish:Chocolatey:FeedUrl"] -apikey $OctopusParameters["Publish:Chocolatey:ApiKey"] -NonInteractive -Verbosity detailed
                    if ($LastExitCode -eq 0) {
                        exit 0
                    } else {
                        write-host "Failed to push package - nuget returned $LastExitCode"
                        $currentAttempt = $currentAttempt + 1
                    }
                }
                exit 1
            EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool = "hosted-windows-2019"

        packages "cli" {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = "OctopusCli"
            properties = {
                Extract = "False"
            }
        }

        packages "NuGet.CommandLine" {
            acquisition_location = "Server"
            feed = "nuget"
            package_id = "NuGet.CommandLine"
            properties = {
                Extract = "True"
            }
        }
    }
}

step "push-changes-to-homebrew-repo" {
    name = "Push Changes To Homebrew Repo"

    action {
        action_type = "Octopus.Script"
        environments = ["production"]
        properties = {
            Octopus.Action.Script.ScriptBody = <<-EOT
                packageVersion="$(get_octopusvariable 'Octopus.Action.Package[cli].PackageVersion')"
                extractedPath="$(get_octopusvariable 'Octopus.Action.Package[cli].ExtractedPath')"
                username="$(get_octopusvariable 'Publish:HomeBrew:Username')"
                email="$(get_octopusvariable 'Publish:HomeBrew:UserEmail')"
                personalAccessToken="$(get_octopusvariable 'Publish:HomeBrew:ApiKey')"

                repoName="$(get_octopusvariable 'Publish:HomeBrew:RepoName')"
                fileName='octopus.rb'
                branchName="releases/$packageVersion"
                repoUrl="https://$username:$personalAccessToken@github.com/OctopusDeploy/$repoName.git"

                git clone $repoUrl

                cd "$repoName"

                # Update version property
                sed -i "s/\(^.*version \"\).*\(\".*$\)/\1$packageVersion\2/g" $fileName

                # Update download URL, `url = https://github.com/OctopusDeploy/cli/releases/download/vX.X.X/octopus_X.X.X_macOS_x86_65.tar.gz`
                sed -i "s/\(^.*url.*OctopusDeploy\/cli\/\).*\(\/.*octopus\_\).*\(\_macOS.*$\)/\1v$packageVersion\2$packageVersion\3/g" $fileName

                newSha=$(sha256sum "$extractedPath/octopus-cli.$packageVersion.osx-x64.tar.gz" | awk '{ print $1 }')
                # Update sha256 property
                sed -i "s/\(^.*sha256 \"\).*\(\".*$\)/\1$newSha\2/g" $fileName

                git config user.email $email
                git config user.name $username

                git checkout -b $branchName
                git add $fileName

                git diff-index --quiet HEAD || (git commit -m "Update for release $packageVersion" \
                    && git push --repo $repoUrl --set-upstream origin $branchName \
                )

            EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "Bash"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "docker-hub"
            image = "octopusdeploy/worker-tools:3.3.2-ubuntu.18.04"
        }

        packages "cli" {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = "OctopusCli.osx"
            properties = {
                Extract = "True"
                Purpose = ""
                SelectionMode = "immediate"
            }
        }
    }
}

step "publish-to-apt-repo" {
    name = "Publish to APT repo"
    start_trigger = "StartWithPrevious"

    action {
        action_type = "Octopus.Script"
        environments = ["production"]
        properties = {
            Octopus.Action.Script.ScriptBody = <<-EOT
                cd cli || exit

                # Deploy APT repo
                docker run --rm --volume $(pwd):/working \
                  --env PUBLISH_LINUX_EXTERNAL="$(get_octopusvariable "Publish:Linux:External")" \
                  --env PUBLISH_ARTIFACTORY_USERNAME="$(get_octopusvariable "Publish:Artifactory:Username")" \
                  --env PUBLISH_ARTIFACTORY_PASSWORD="$(get_octopusvariable "Publish:Artifactory:Password")" \
                  --env AWS_ACCESS_KEY_ID="$(get_octopusvariable "LinuxPackagePublisherAwsAccount.AccessKey")" \
                  --env AWS_SECRET_ACCESS_KEY="$(get_octopusvariable "LinuxPackagePublisherAwsAccount.SecretKey")" \
                  octopusdeploy/publish-linux bash -c 'cd /working && bash publish-apt.sh' 2>&1 || exit

            EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "Bash"
        }
        worker_pool = "hosted-ubuntu"

        packages "cli" {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = "OctopusCli.linux"
            properties = {
                Extract = "True"
                SelectionMode = "immediate"
            }
        }
    }
}

step "publish-to-rpm-repo" {
    name = "Publish to RPM repo"
    start_trigger = "StartWithPrevious"

    action {
        action_type = "Octopus.Script"
        environments = ["production"]
        properties = {
            Octopus.Action.Script.ScriptBody = <<-EOT
                cd cli || exit

                # Deploy RPM repo
                docker run --rm --volume $(pwd):/working \
                  --env PUBLISH_LINUX_EXTERNAL="$(get_octopusvariable "Publish:Linux:External")" \
                  --env PUBLISH_ARTIFACTORY_USERNAME="$(get_octopusvariable "Publish:Artifactory:Username")" \
                  --env PUBLISH_ARTIFACTORY_PASSWORD="$(get_octopusvariable "Publish:Artifactory:Password")" \
                  --env AWS_ACCESS_KEY_ID="$(get_octopusvariable "LinuxPackagePublisherAwsAccount.AccessKey")" \
                  --env AWS_SECRET_ACCESS_KEY="$(get_octopusvariable "LinuxPackagePublisherAwsAccount.SecretKey")" \
                  octopusdeploy/publish-linux bash -c 'cd /working && bash publish-rpm.sh' 2>&1 || exit

            EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "Bash"
        }
        worker_pool = "hosted-ubuntu"

        packages "cli" {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = "OctopusCli.linux"
            properties = {
                Extract = "True"
                SelectionMode = "immediate"
            }
        }
    }
}
