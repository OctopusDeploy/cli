step "push-cli-to-chocolatey" {
    name = "Push cli to Chocolatey"

    action {
        action_type = "Octopus.Script"
        environments = ["production"]
        properties = {
            Octopus.Action.Script.ScriptBody = <<-EOT
                $nugetPackagePath = $OctopusParameters["Octopus.Action.Package[NuGet.CommandLine].ExtractedPath"]
                $nugetExe = Join-Path -Path $nugetPackagePath -ChildPath "Tools\nuget.exe"
                $extractedPath = $OctopusParameters["Octopus.Action.Package[cli].ExtractedPath"]
                $packagePath = Get-ChildItem -Path $extractedPath -Name "octopus-cli*.nupkg"
                $fullPackagePath = Join-Path -Path $extractedPath -ChildPath $packagePath
                
                $maxAttempts = 5
                $currentAttempt = 1
                
                while ($currentAttempt -le $maxAttempts)
                {
                    write-host "Pushing package ($fullPackagePath) to Chocolatey (attempt $currentAttempt)"
                    . $nugetExe push "$fullPackagePath" -source $OctopusParameters["Publish:Chocolatey:FeedUrl"] -apikey $OctopusParameters["Publish:Chocolatey:ApiKey"] -NonInteractive -Verbosity detailed
                    if ($LastExitCode -eq 0) {
                        exit 0
                    } else {
                        write-host "Failed to push package - nuget returned $LastExitCode"
                        $currentAttempt = $currentAttempt + 1
                    }
                }
                exit 1
            EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool = "hosted-windows-2019"

        packages "cli" {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = "octopus-cli"
            properties = {
                Extract = "True"
            }
        }

        packages "NuGet.CommandLine" {
            acquisition_location = "Server"
            feed = "nuget"
            package_id = "NuGet.CommandLine"
            properties = {
                Extract = "True"
            }
        }
    }
}

step "create-pull-request-to-update-formula-in-homebrew" {
    name = "Create pull request to update formula in Homebrew"
    start_trigger = "StartWithPrevious"

    action {
        action_type = "Octopus.Script"
        environments = ["production"]
        properties = {
            Octopus.Action.Script.ScriptBody = <<-EOT
                # create-homebrew-pr.ps1
                param(
                    [String]$packageVersion, # e.g. "0.2.2"
                    [String]$extractedPath, # e.g.  "C:\Users\Orion\Downloads\octopus-cli.0.2.2"
                    [String]$githubtoken
                )
                
                $origin="https://github.com/OctopusDeploy/homebrew-taps"
                
                if ($OctopusParameters) {
                    $packageVersion = $OctopusParameters["Octopus.Action.Package[cli].PackageVersion"]
                    $extractedPath = $OctopusParameters["Octopus.Action.Package[cli].ExtractedPath"]
                
                    $githubtoken = $OctopusParameters["Publish:HomeBrew:ApiKey"]
                    $origin="https://${githubtoken}@github.com/OctopusDeploy/homebrew-taps"

                    git config user.name $OctopusParameters["Publish:HomeBrew:Username"]
                    git config user.email $OctopusParameters["Publish:HomeBrew:UserEmail"]
                }
                
                if (!$packageVersion || !$extractedPath) {
                    throw "Error: packageVersion or extractedPath are not set"
                    exit
                } else {
                    write-host "Using: packageVersion $packageVersion from $extractedPath"
                }
                
                git clone --depth 1 $origin octopus-homebrew-taps
                cd octopus-homebrew-taps

                $branchName = "releases/$packageVersion"
                git checkout -b $branchName
                
                Copy-Item -Path "$extractedPath/*" -Filter "*.rb" -Destination "." -Force

                git commit -a -m "octopus-cli $packageVersion"
                git push --set-upstream origin $branchName

                if ($githubtoken) {
                    $baseBranch = $(git symbolic-ref "refs/remotes/origin/HEAD") -replace "refs/remotes/origin/", ""

                    Invoke-RestMethod -Method POST `
                        -Headers @{"Accept" = "application/vnd.github+json";"Authorization" = "Bearer $githubtoken"} `
                        -Uri https://api.github.com/repos/OctopusDeploy/homebrew-taps/pulls `
                        -Body @{title = "octopus-cli $packageVersion";body = "automatically generated";head = $branchName;base = $baseBranch}
                }

                cd ..
            EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "docker-hub"
            image = "octopusdeploy/worker-tools:3.3.2-ubuntu.18.04"
        }

        packages "cli" {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = "octopus-cli"
            properties = {
                Extract = "True"
                Purpose = ""
                SelectionMode = "immediate"
            }
        }
    }
}

step "publish-to-apt-repo" {
    name = "Publish to APT repo"
    start_trigger = "StartWithPrevious"

    action {
        action_type = "Octopus.Script"
        environments = ["production"]
        properties = {
            Octopus.Action.Script.ScriptBody = <<-EOT
                cd cli || exit
                
                # Deploy APT repo
                docker run --rm --volume $(pwd):/working \
                  --env PUBLISH_LINUX_EXTERNAL="$(get_octopusvariable "Publish:Linux:External")" \
                  --env PUBLISH_ARTIFACTORY_USERNAME="$(get_octopusvariable "Publish:Artifactory:Username")" \
                  --env PUBLISH_ARTIFACTORY_PASSWORD="$(get_octopusvariable "Publish:Artifactory:Password")" \
                  --env AWS_ACCESS_KEY_ID="$(get_octopusvariable "LinuxPackagePublisherAwsAccount.AccessKey")" \
                  --env AWS_SECRET_ACCESS_KEY="$(get_octopusvariable "LinuxPackagePublisherAwsAccount.SecretKey")" \
                  octopusdeploy/publish-linux bash -c 'cd /working && bash publish-apt.sh' 2>&1 || exit
                
            EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "Bash"
        }
        worker_pool = "hosted-ubuntu"

        packages "cli" {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = "octopus-cli"
            properties = {
                Extract = "True"
                SelectionMode = "immediate"
            }
        }
    }
}

step "publish-to-rpm-repo" {
    name = "Publish to RPM repo"
    start_trigger = "StartWithPrevious"

    action {
        action_type = "Octopus.Script"
        environments = ["production"]
        properties = {
            Octopus.Action.Script.ScriptBody = <<-EOT
                cd cli || exit
                
                # Deploy RPM repo
                docker run --rm --volume $(pwd):/working \
                  --env PUBLISH_LINUX_EXTERNAL="$(get_octopusvariable "Publish:Linux:External")" \
                  --env PUBLISH_ARTIFACTORY_USERNAME="$(get_octopusvariable "Publish:Artifactory:Username")" \
                  --env PUBLISH_ARTIFACTORY_PASSWORD="$(get_octopusvariable "Publish:Artifactory:Password")" \
                  --env AWS_ACCESS_KEY_ID="$(get_octopusvariable "LinuxPackagePublisherAwsAccount.AccessKey")" \
                  --env AWS_SECRET_ACCESS_KEY="$(get_octopusvariable "LinuxPackagePublisherAwsAccount.SecretKey")" \
                  octopusdeploy/publish-linux bash -c 'cd /working && bash publish-rpm.sh' 2>&1 || exit
                
            EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "Bash"
        }
        worker_pool = "hosted-ubuntu"

        packages "cli" {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = "octopus-cli"
            properties = {
                Extract = "True"
                SelectionMode = "immediate"
            }
        }
    }
}